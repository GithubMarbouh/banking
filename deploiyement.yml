name: Deploy to Oracle Cloud

on:
  push:
    branches: [ main ]

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_FINGERPRINT }}
  OCI_CLI_KEY_FILE: ${{ secrets.OCI_KEY_FILE }}
  OCI_CLI_REGION: ${{ secrets.OCI_REGION }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build all services
      run: |
        cd RegistryService && mvn clean package -DskipTests
        cd ../ConfigServer && mvn clean package -DskipTests
        cd ../Cloud_Gateway && mvn clean package -DskipTests
        cd ../GestionTransactions && mvn clean package -DskipTests
        cd ../NotificationsService && mvn clean package -DskipTests
        cd ../gestionUser && mvn clean package -DskipTests
        cd ../microservice_portefeuille && mvn clean package -DskipTests

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run: |
        docker-compose build
        docker-compose push

    - name: Install OCI CLI
      run: |
        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
        chmod +x install.sh
        ./install.sh --accept-all-defaults

    - name: Configure OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_KEY_FILE }}" > ~/.oci/key.pem
        oci setup config --key-file ~/.oci/key.pem --region ${{ env.OCI_CLI_REGION }}

    - name: Deploy to OCI
      run: |
        oci compute instance launch \
          --compartment-id ${{ secrets.OCI_COMPARTMENT_ID }} \
          --availability-domain ${{ secrets.OCI_AD }} \
          --shape VM.Standard.E2.1 \
          --image-id ${{ secrets.OCI_IMAGE_ID }} \
          --subnet-id ${{ secrets.OCI_SUBNET_ID }} \
          --assign-public-ip true \
          --metadata '{
            "docker_compose": "${{ secrets.DOCKER_COMPOSE_CONTENT }}"
          }'

    - name: Configure and start services
      run: |
        echo "Waiting for instance to be ready..."
        sleep 60
        ssh -i ~/.oci/key.pem opc@${{ steps.instance.outputs.public_ip }} \
        'docker-compose up -d'

    - name: Cleanup
      if: always()
      run: rm -f ~/.oci/key.pem